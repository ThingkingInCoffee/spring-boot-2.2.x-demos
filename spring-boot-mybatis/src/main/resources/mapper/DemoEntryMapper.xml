<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hzy.mybatis.mapper.DemoEntryMapper" >
  <!--配置开启全局二级缓存-->
  <!--eviction 指定缓存过期策略 默认LRU 可选 LRU FIFO SOFT WEAK-->
  <!--flushInterval 指定缓存刷新间隔 默认不刷新，仅在调用时刷新-->
  <!--size 指定缓存引用数目 默认 1024-->
  <!--readOnly 只读 返回缓存对象的相同示例，缓存对象不能修改，性能好。读写模式返回缓存对象的拷贝，速度慢些-->
  <!--type 指定自定义缓存实现-->
  <!--定义全局缓存配置之后，也可以在单个语句配置中通过 useCache 属性控制使用缓存以及flushCache属性-->
  <!--<cache eviction="LRU" flushInterval="60000" size="1024" readOnly="false" type="com.domain.something.MyCustomCache"/>-->
  <!--指定使用其他 namespace 的缓存配置-->
  <!--<cache-ref namespace="com.someone.application.data.SomeMapper"/>-->
  <resultMap id="BaseResultMap" type="com.hzy.mybatis.entry.DemoEntry" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="demo_name" property="demoName" jdbcType="VARCHAR" />
    <result column="demo_type" property="demoType" jdbcType="TINYINT" />
    <result column="zip_code" property="zipCode" jdbcType="CHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <!--配合include标签使用-->
  <sql id="Base_Column_List" >
    id, demo_name, demo_type, zip_code, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from demo_entry
    where id = #{id,jdbcType=INTEGER}
  </select>
  <!--flushCache 清空缓存  设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。-->
  <!--useCache  该语句使用二级缓存，select语句默认为true-->
  <!--timeout 抛出异常之前，驱动程序等待数据库返回请求结果的秒，数默认值为未设置（unset）（依赖数据库驱动）-->
  <!--fetchSize 这是一个给驱动的建议值，尝试让驱动程序每次批量返回的结果行数等于这个设置值。 默认值为未设置（unset）（依赖驱动）。-->
  <!--statementType 可选 STATEMENT，PREPARED 或 CALLABLE。分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。-->
  <select id="selectDemo" parameterType="int"  resultType="com.hzy.mybatis.entry.DemoEntry" flushCache="false" useCache="true"
          timeout="10" fetchSize="256" statementType="PREPARED" resultSetType="FORWARD_ONLY">
    select * from demo_entry where id = #{id,jdbcType=INTEGER}
  </select>
  <!--useGeneratedKeys 仅适用于 insert 和 update 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键-->
  <!--keyProperty 指定能够唯一识别对象的属性-->
  <insert id="insertDemo" parameterType="com.hzy.mybatis.entry.DemoEntry" useGeneratedKeys="true"
  keyProperty="id" keyColumn="id">
    insert into demo_entry (id, demo_name, demo_type,
      zip_code, create_time, update_time
      )
    values (#{id,jdbcType=INTEGER}, #{demoName,jdbcType=VARCHAR}, #{demoType,jdbcType=TINYINT},
      #{zipCode,jdbcType=CHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <update id="updateDemo">

  </update>
  <delete id="deleteDemo">

  </delete>
</mapper>